import jm.JMC;import jm.util.*;import jm.music.data.*;//import java.util.Vector;/* * * Written by: Matthew Sweeterman * * Syntax, Design, and Algorithms used from * the jMusic library by: * @author Andrew Troedson and Andrew Brown * */public final class BassMutation implements JMC {	public static void main(String[] args) {		/* declare the empty bar arrays */		Part part = new Part("Piano", PIANO, 1);		Part part2 = new Part("Drums", 0, 9);		Score score = new Score("AlgoMusic", 84);		Phrase phr = new Phrase();		//int compDur = (int) (Math.random() * (10 - 1) + 1);		int compDur = 2;		//melody		int scale = (int) (Math.random() * 11-0);		int pitch;		int[] pitchSelection = {60, 62, 64, 65, 67, 69, 71, 72, REST}; //C Major Scale		switch(scale){			case 0: //C Major Scale				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i];					}				}				break;			case 1: // C#/Eb Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] + 3;					}				}				break;			case 2: // D Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] + 2;					}				}				break;			case 3: // D#/Eb Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] + 3;					}				}				break;			case 4: //E Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] + 4;					}				}				break;			case 5: // F Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] - 7;					}				}				break;			case 6: //F#/Gb Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] - 6;					}				}				break;			case 7: //G Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] - 5;					}				}				break;			case 8: //G#/Ab Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] - 4;					}				}				break;			case 9: // A Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] - 3;					}				}				break;			case 10: //A#/Bb Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] - 2;					}				}				break;			case 11: //B Major				for (int i = 0; i < pitchSelection.length; i++) {					if(pitchSelection[i] > 0){						pitchSelection[i] = pitchSelection[i] - 1;					}				}				break;		}		int noteNumb = 1;		//create the initial bass phrase		for (int i = 0; i < noteNumb; i++) {			pitch = pitchSelection[(int) (Math.random() * pitchSelection.length)];			Note note = new Note(pitch, SQ, (int) (Math.random() * 70 + 50));			phr.addNote(note);		}		//the main Bass mutate loop		int x = (int) (Math.random() * (16-1))+1;		for (int i = 0; i < compDur; i++) {			//add the new phrase to the part			part.addPhrase(phr.copy());			//mutate random amount of note			for(int j = 0; j < x; j++){				Note n = phr.getNote((int) (Math.random() * noteNumb));				n.setPitch(pitchSelection[(int) (Math.random() * pitchSelection.length)]);			}		}		//how many drum phrases. Each loop adds 6 phrases (measures).		for(int i = 0; i < compDur/2; i++){			CPhrase drums = MakeParts.drumPattern();			part2.addCPhrase(drums);		}		score.addPart(part);		score.addPart(part2);		// display the score on screen		//View.show(score);		//write a MIDI file to disk		Write.midi(score, "BassMutation.mid");		//View.print(s);	}}